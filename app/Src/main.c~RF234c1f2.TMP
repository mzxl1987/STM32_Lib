
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  ** This notice applies to any and all portions of this file
  * that are not between comment pairs USER CODE BEGIN and
  * USER CODE END. Other portions of this file, whether 
  * inserted by the user or by software development tools
  * are owned by their respective copyright owners.
  *
  * COPYRIGHT(c) 2018 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f1xx_hal.h"
#include "adc.h"
#include "crc.h"
#include "dma.h"
#include "i2c.h"
#include "rtc.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* USER CODE BEGIN Includes */

#include "string.h"

#include "config.h"
#include "miniConfig.h"
#include "gpioUtil.h"
#include "arrayUtil.h"
#include "ds3231Util.h"
#include "eepromUtil.h"
#include "flashUtil.h"
#include "systemUtil.h"
#include "rtcUtil.h"
#include "lightUtil.h"
#include "loraUtil.h"
#include "nbUtil.h"
#include "equipUtil.h"
#include "crcUtil.h"



/*******************   重写printf函数  *************************/
#ifdef __GNUC__
  #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF);
return ch;
}


/// 调试串口参数实例化

ulong timer=0;

uint32_t adc_DATA[ADC_SIZE];
uint8_t hasClear;          //清除运行次数

RTC_TimeTypeDef sTime;          //RTC时间
RTC_DateTypeDef sDate;          //RTC日期

_calendar_obj calendar;				//时钟结构体 

/********************************
 *  EEPROM 中数据的存储结构
 * 1.终端ID              6bytes
 * 2.制造商ID            5bytes
 * 3.终端型号            8bytes
 * 4.开关灯起始日期       2byte  BCD编码
 * 5.开关灯时间           366 * 3  =  1098  ,1440分钟(0x5A0),开机时间：06:30 -> 0x186,关机时间：17:30  -> 0x41A  ,开关机时间表示为:0x18641A
 * 
*********************************/

uint8_t equipmentID[ADDR_equipmentID_Size] ;   //<----------- 终端ID ------------
uint8_t manufacturerID[ADDR_manufacturerID_Size] ;   //<----------- 制造商ID ----------
uint8_t terminalModel[ADDR_terminalModel_Size];   //<----------- 终端型号 -----------
uint8_t ONOFF_startDate[ADDR_light_ONOFF_startDate_Size];  //<---------------- 设置开关灯的起始日期 0x0A0A表示：10月10日 -------------
uint8_t ONOFF_todayTime[4];  //<---------------- 当日开关灯时间 -------------------
uint8_t light_ONOFF_datetime[light_ONOFF_datetime_SIZE];   //开关灯策略时间
uint8_t light_params[52];   //路灯参数

uint8_t TMP_ONOFF_startDate[ADDR_TMP_ONOFF_startDate_Size];  //<---------------- 临时开关灯起始日期 -------------------
uint8_t TMP_ONOFF_DayCount[ADDR_TMP_ONOFF_DayCount_Size];  //<---------------- 0x00:无效  0x01~0xfe有效天数 0xff:一直有效 -------------------
uint8_t TMP_ONOFF_time[4];  //<---------------- 临时开关灯时间 -------------------

/****
 
 路灯参数

***/
uint8_t light_count;       //<------------------ 灯杆最多安装灯数量
uint8_t enable_latlng_strategy;  //<---------- 经纬度开关时间启用标志，0禁用  1启用

/***
起始字节	字段	数据类型	描述及要求
0	配置启用标志	BYTE	0x00 不启用；0x01 启用；0x02~0xff 未知
1	一阶段时间	BCD[2]	BCD[0]时 ，BCD[1]分
3	一阶段阀值	BYTE[4]	见表8.18.2
7	二阶段时间	BCD[2]	
9	二阶段阀值	BYTE[4]	
13	三阶段时间	BCD[2]	
15	三阶段阀值	BYTE[4]	
19	四阶段时间	BCD[2]	
21	四阶段阀值	BYTE[4]	
25	五阶段时间	BCD[2]	
27	五阶段阀值	BYTE[4]	 
****/
uint8_t dimmer[ADDR_Dimmer_SIZE]; //<------- 调光参数 --------------------
uint8_t light_control_percent[ADDR_light_control_Size];  //<----------  单灯控制百分比  -----------
uint8_t light_control_mode[ADDR_light_control_mode_Size];  //<---------- 单灯自动/手动运行模式,  0-自动时间控制,1-手动控制，2~255-保留  -----------

/*====================================================
** 电量采集
** 最多采集4盏灯的数据
** 存放数据的顺序:漏电电压1byte 漏电电流2byte
** 灯1序号1byte 电压V1byte 电流2byte 有功功率2byte
** 灯2序号1byte 电压V1byte 电流2byte 有功功率2byte
** 灯3序号1byte 电压V1byte 电流2byte 有功功率2byte
**====================================================*/
uint8_t collectionItem[collectionAlarm_Size];
uint8_t normalTest_j;
/**===================================================
*** 报警数据采集
***位	定义	处理说明
0	电容故障	标志维持至报警条件解除
1	光源故障	标志维持至报警条件解除
2	继电器故障	标志维持至报警条件解除
3	保险丝故障	标志维持至报警条件解除
4	存储芯片故障	标志维持至报警条件解除
5	时钟芯片故障	标志维持至报警条件解除
6	读卡模块故障	标志维持至报警条件解除
7	内部参数配置故障	标志维持至报警条件解除
8	漏电报警	标志维持至报警条件解除
9	防盗报警	标志维持至报警条件解除
10	水浸报警	标志维持至报警条件解除
11	电流过大报警	标志维持至报警条件解除
12	功率过大报警	标志维持至报警条件解除
13	功率过小报警	标志维持至报警条件解除
14~31	预留	

-------------------------------------------------------
参数设置
0x10	1	漏电保护启用标志，0x00启用 0x01~0xff禁用
0x11	2	漏电流阀值，单位mA
0x12	2	漏电极限不驱动时间，持续时间超过该值，则关断输出，单位ms
0x13	2	漏电延时重合闸时间，持续时间超过该值，则开合输出，单位ms
0x14	1	漏电压阀值，单位V
0x15	1	经纬度开关时间启用标志，0禁用  1启用
0x16	1	报警间隔分钟数，1~60，默认为1

0x21	1	电容故障报警功率因数限值，单位0.01
0x22	1	电容故障恢复功率因数限值，单位0.01
0x23	1	电流过大报警电流限值，单位0.1A
0x24	1	电流过大恢复电流限值，单位0.1A
0x25	1	功率过大报警限值，单位10W
0x26	1	功率过大恢复限值，单位10W
0x27	1	功率过小报警限值，单位10W
0x28	1	功率过小恢复限值，单位10W
0x29	1	电压报警限值,单位V

0x30	1	数据冻结密度m(存储历史数据的间隔时间)，见表A.8.15.6
0x31	2	开灯后电流过大保护延迟时间，0-该功能禁止，单位秒(s)


***===================================================*/
uint32_t collectionAlarm;
uint8_t hasResponse_Alarm;

/*====================================================
 * 电流电压以及功率的参考值 ,  及对应的电流电压以及功率的校准值
 * 1.是否已经矫正  1byte   0:未矫正, 1:已矫正
 * 2.I参考电流     2bytes
 * 3.V参考电压     2bytes
 * 4.P参考功率     2bytes
 * 5.I电流的参考频率  2bytes
 * 6.V电压的参考频率  2bytes
 * 7.P功率的参考频率  2bytes
 * EEPROM中地址顺序 :是否校准
 *                   灯0校准电流值,灯0校准电压值,灯0校准功率值,灯1校准电流值,灯1校准电压值,灯1校准功率值,灯2校准电流值,灯2校准电压值,灯2校准功率值,
 *                   灯0校准电流频率,灯0校准电压频率,灯0校准功率频率,灯1校准电流频率,灯1校准电压频率,灯1校准功率频率,灯2校准电流频率,灯2校准电压频率,灯2校准功率频率,
 =====================================================*/
uint8_t standard[address_standard_Size];  //校准数据
uint8_t has_adjust = 0;  //0:表示未校准, 1:表示已经校准
uint32_t standard_IVP[9] ;    //测量的电流值,电压值,以及功率
uint32_t frequence_IVP[9];  //对应测得的校准频率
uint32_t f_IVP;   //待测试的电流电压功率 频率
uint32_t test_time = 3000;

/** 灯状态,按照位表示灯状态,第0位:表示灯1,1：表示灯2,2表示灯3 --------------------------------------------**/
uint8_t light_status;      

/** Lora状态  ---------------------------------------------------------------------------------------- **/
uint8_t lora_status = 0x00;   
uint32_t lora_current_time = 0;

uint8_t isLogin;   //判断是否登录到中间层,0:未登录,1:登录

/******************************************
**** 设备运行时间计算
*******************************************/
uint8_t arr_totalRunningTime[4];   //总运行时间
uint32_t preRunningTime = 0;     //上次存储时运行时间
uint8_t arr_currentTime[2];         //当前运行时间
uint32_t dtRunningTime = 0;      //本次与上一次存储的差值

uint8_t hasTest = 0;            //1表示已经测试

/** DEBUG 串口参数 -------------------------------- **/
ubyte uart1_idle = 0;
ubyte buffer_uart1[MAX_REC_COUNT];
uint buffer_uart1_size;
uint32_t flash_addr_offset;
uint32_t frame_size;

/** Lora参数  ------------------------------------- **/
ubyte uart2_idle = 0;
ubyte buffer_uart2[LORA_MAX_REC_COUNT];
uint buffer_uart2_size;
uint32_t lora_read_index = 0;
uint32_t lora_send_timespan;      //lora数据发送时间间隔
uint32_t lora_wait_timespan;      //lora等待时间间隔,为了错开发送时机
uint8_t lora_wait_overtime;       //lora等待结束,0:表示没有结束，1:表示等待结束

/** NB参数 -------------------------------------- **/
uint8_t nb_status;
uint32_t nb_current_time = 0;
ubyte uart3_idle = 0;
ubyte buffer_uart3[NB_MAX_REC_COUNT];
uint buffer_uart3_size;
uint32_t nb_read_index = 0;
uint8_t update_frame[NB_MAX_REC_COUNT];
uint8_t nb_checkTimes = 0;
uint32_t nb_rec_frame_index;
uint32_t nb_last_rec_tick = 0;


/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/




/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_NVIC_Init(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
	//已在system_stm32fxx.c文件中修改了  VECT_TAB_OFFSET  参数
	//SCB->VTOR = FLASH_ADDR_BOOTLOADER;              

	__enable_irq();
	
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  MX_USART3_UART_Init();
  MX_I2C1_Init();
  MX_I2C2_Init();
  MX_TIM1_Init();
  MX_ADC1_Init();
  //MX_RTC_Init();
  MX_TIM3_Init();
  MX_CRC_Init();

  /* Initialize interrupts */
  MX_NVIC_Init();
  /* USER CODE BEGIN 2 */
	{
		/** 自定义配置RTC时钟  ------------------------------ **/
		MY_RTC_Init(&hrtc);
		
		printf("**************************************************************\r\n");
		printf("**                      单灯控制器                           **\r\n");
		printf("**************************************************************\r\n");
		printf("**          %s          **\r\n",VERSION);
		printf("**          %s          **\r\n",COPYRIGHT);
		printf("**************************************************************\r\n");
		
		RTC_Get(&hrtc);				
		printf("*****************************************************\r\n");
		printf("**   RTC当前时间 : %04d-%02d-%02d %02d:%02d:%02d   **\r\n",
			calendar.w_year,calendar.w_month,calendar.w_date,calendar.hour,calendar.min,calendar.sec
		);
		printf("*****************************************************\r\n");
		HAL_Delay(500);
		
		/** Lora使能设置 ---------------------------------------- **/
//		digitalWrite(Lora_PowerON_GPIO_Port,Lora_PowerON_Pin,HIGH);  //<-----已经在STM32CubeMX的GPIO中配置
//		digitalWrite(Lora_EN_GPIO_Port,Lora_EN_Pin,HIGH);            //<-----已经在STM32CubeMX的GPIO中配置
			
		/** 初始化EEPROM参数  ------------------------------- **/
		Init_EEPROM();
		
		/** 启用串口空闲中断,开启中断接收 ------------------------- **/
		__HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);      //打开串口1空闲中断	
		HAL_UART_Receive_DMA(&huart1,(ubyte * )buffer_uart1,MAX_REC_COUNT);     //启用串口中断
		
		//__HAL_UART_ENABLE_IT(&huart2,UART_IT_IDLE);      //打开串口2空闲中断	
		HAL_UART_Receive_DMA(&huart2,(ubyte * )buffer_uart2,LORA_MAX_REC_COUNT);     //启用串口中断
		
		//__HAL_UART_ENABLE_IT(&huart3,UART_IT_IDLE);      //打开串口3空闲中断	
		HAL_UART_Receive_DMA(&huart3,(ubyte * )buffer_uart3,NB_MAX_REC_COUNT);     //启用串口中断
		
		/** 打开TIM3定时器中断 -------------------------------------------------- **/
		HAL_TIM_Base_Start_IT(&htim3);
		
		
		/** 记录开机运行时的时间 ------------------------------------------------- **/
		lora_current_time = HAL_GetTick();
		/** Lora第一次发送等待时间  ---------------------------------------- **/
		lora_wait_timespan = (equipmentID[ADDR_equipmentID_Size -1] % 30) * 5 * SECOND_TICK;
		
		/** 使能SIM7000模块 ------------------------------------------------ **/
		//digitalWrite(NB_PSIM_GPIO_Port,NB_PSIM_Pin,HIGH);  //<-----已经在STM32CubeMX的GPIO中配置
		/** 启动SIM7000模块 ------------------------------------------------ **/
		nb_repower();
		nb_current_time = HAL_GetTick();
		
		
	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	
			/** 调试代码  ------------------------------------------------------- **/
			//TODO
			uint8_t data[] = {0x00,0x17,0x00,0x20};
			uint32_t crc_result = 0x214A4303;
			if(crc_check(data,0,4,crc_result)){
				
			}
			HAL_Delay(1000000);
			
//			/** 开关灯  ----------------------------------------------------------------- **/
//			turnOnOffLight();
//	
			/** 串口1 调试 -------------------------------------------------------------- **/
			{
				if(uart1_idle && buffer_uart1_size){
				
//					printf("[DEBUG] Queue len : %d\r\n",buffer_uart1_size);
//					printf("[DEBUG] Queue Data :%s\r\n",buffer_uart1);
					
					/** 串口参数设置 BEGIN -------------------------------------------------- **/
					equip_set(buffer_uart1,buffer_uart1_size);
					/** 串口参数设置 END -------------------------------------------------- **/
					
					/** 程序升级 BEGIN ------------------------------------------------------------------------------------ **/
				  equip_serial_update(buffer_uart1,buffer_uart1_size);
					/** 程序升级 END ------------------------------------------------------------------------------------ **/
				
					//HAL_UART_Transmit(&huart3,buffer_uart1,buffer_uart1_size,0xFFFF);
					
					uart1_idle = 0;
					buffer_uart1_size = 0;

				}
			}
			
			
//			/** 串口2 Lora --------------------------------------------------------------------------------------- **/
//			{	
////				printf("**-------------  Lora ASCII------------------------**\r\n");
////				printf(buffer_uart2);
////				printf("**-------------  Lora HEX -------------------------**\r\n");
////				print_hex(buffer_uart2,LORA_MAX_REC_COUNT);
////				printf("**-------------------------------------------------**\r\n");
//				
//				lora_analysis_data();
//			}
			
			/** 串口3 NB-IOT --------------------------------------------------------------------------- **/
			{
				
//				printf("**-------------  NB ASCII------------------------**\r\n");
//				printf(buffer_uart3);
//				printf("**-------------  NB HEX -------------------------**\r\n");
//				print_hex(buffer_uart3,NB_MAX_REC_COUNT);
//				printf("**-------------------------------------------------**\r\n");
				nb_analysis();
				
			}
			
			/** 路灯数据监测 ----------------------------------------------------------------------------- **/
//			normalTest();
			
			/** 发送检测数据 ----------------------------------------------------------------------------- **/
//			lora_sendData();
			nb_sendData();
			
//			/** 清除APP运行次数 ----------------------------------------**/
//			{
//				if(!hasClear && HAL_GetTick() > HOUR_TICK){
//					uint32_t app_reboot_times = 0;
//					HAL_I2C_Mem_Write(&hi2c2,I2C_EEPROM_OWN_ADDR,EERROM_REBOOT_TIMES_ADDR,I2C_MEMADD_SIZE_16BIT,(uint8_t*)&app_reboot_times,EERROM_REBOOT_TIMES_SIZE,0xFFFF);	
//					HAL_Delay(10);
//					printf(" >> 清除运行标记");
//					hasClear = 1;
//				}
//			}
//			
//			/** 更新内存时间  --------------------------------------------------------- **/
//			RTC_Get(&hrtc);
			
			HAL_Delay(20);

  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
		
		
		
  }
  /* USER CODE END 3 */

}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
}

/* USER CODE BEGIN 4 */


/* USER CODE END 4 */

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM8 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/**
  * @}
  */

/**
  * @}
  */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
